<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
	java.util.Map
	java.util.List
" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	List<Map<String, String>> uris = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__URIS__");
	boolean useAggregationStrategy  = "true".equals(ElementParameterParser.getValue(node, "__USE_AGGREGATION_STRATEGY__"));
	String aggregationStrategy = ElementParameterParser.getValue(node, "__AGGREGATION_STRATEGY__");
	boolean parallelProcessing  = "true".equals(ElementParameterParser.getValue(node, "__PARALLEL_PROCESSING__"));
	String timeout  = ElementParameterParser.getValue(node, "__TIMEOUT__");
	boolean useTimeout = "true".equals(ElementParameterParser.getValue(node, "__USE_TIMEOUT__"));
	boolean stopOnException="true".equals(ElementParameterParser.getValue(node, "__STOP_ON_EXCEPTION__"));
	int urisCount = uris.size();
			
	List< ? extends IConnection> conns = node.getIncomingConnections();
	if(conns.size()>0) {
%>
		.multicast(
<%
		if(useAggregationStrategy) {
%>
			new <%=aggregationStrategy%>()
<%
		}
		//Below : we close the multicast bracket
%>
		)
<%
		if(parallelProcessing) {
%>
			.parallelProcessing()
<%
			if(useTimeout) {
%>
				.timeout(<%=timeout%>)
<%
			}
		}
		if(stopOnException){
			%>.stopOnException()<%
		
		}
		

		if(urisCount>0) {
			boolean isFirstUri = true;
			for(Map<String, String> anUri : uris) {
			
				if(isFirstUri) {
					isFirstUri=false;
%>
					.to(<%=anUri.get("URI")%>
<%
				} else {
%>
					,<%=anUri.get("URI")%>
<%
				}
			}
%>
			)
<%
		}
	}
%>