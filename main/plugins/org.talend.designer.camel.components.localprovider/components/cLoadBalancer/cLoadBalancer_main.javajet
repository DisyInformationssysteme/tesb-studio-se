<%@ jet skeleton="../common/cLanguage.skeleton"
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
	java.util.Map
" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	List< ? extends IConnection> conns = node.getIncomingConnections();
	
	String strategy = ElementParameterParser.getValue(node, "__STRATEGY__");
	String language = ElementParameterParser.getValue(node, "__LANGUAGES__");
	String expression = ElementParameterParser.getValue(node, "__EXPRESSION__");
	String useNamespaces = ElementParameterParser.getValue(node, "__USE_NAMESPACES__");
	
	String exceptionMode = ElementParameterParser.getValue(node, "__EXCEPTION_MODE__");
	String roundRobinMode = ElementParameterParser.getValue(node, "__ROUND_ROBIN_MODE__");
	
	String maxFailAttempt = ElementParameterParser.getValue(node, "__MAXFAILATTEMPT__");
	
	String inherit = ElementParameterParser.getValue(node, "__INHERIT_ERROR_HANDLER__");
	String useRoundRobin = ElementParameterParser.getValue(node, "__USE_ROUND_ROBIN__");
	
	String attemptNumber = ElementParameterParser.getValue(node, "__ATTEMPT_NUMBER__");
	
	String customBalancer = ElementParameterParser.getValue(node, "__CUSTOM_LOAD_BALANCER__");
	
	List<Map<String, String>> exceptions = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__EXCEPTIONS__");
	
		
	if(conns.size()>0) { //BEGIN 1
		if(!("custom".equals(strategy))) { //BEGIN 2
%>
			.loadBalance().<%=strategy%>(
<%
				if("sticky".equals(strategy)) { //BEGIN STICKY
					if ("el".equals(language)) {
%>
					new org.apache.camel.model.language.ELExpression(<%=expression%>)
<%
					} else if ("groovy".equals(language)) {
%>
					new org.apache.camel.model.language.GroovyExpression(<%=expression%>)
<%
					} else if ("javascript".equals(language)) {
%>
					new org.apache.camel.model.language.JavaScriptExpression(<%=expression%>)
<%
					} else if ("sql".equals(language)) {
%>
					new org.apache.camel.model.language.SqlExpression(<%=expression%>)
<%
					} else if ("jsonpath".equals(language)) {
%>
					new org.apache.camel.model.language.JsonPathExpression(<%=expression%>)
<%
					} else if ("jxpath".equals(language)) {
%>
					new org.apache.camel.model.language.JXPathExpression(<%=expression%>)
<%
					} else if ("mvel".equals(language)) {
%>
					new org.apache.camel.model.language.MvelExpression(<%=expression%>)
<%
					} else if ("ognl".equals(language)) {
%>
					new org.apache.camel.model.language.OgnlExpression(<%=expression%>)
<%
					} else if ("php".equals(language)) {
%>			
					new org.apache.camel.model.language.PhpExpression(<%=expression%>)
<%
					} else if ("python".equals(language)) {
%>
					new org.apache.camel.model.language.PythonExpression(<%=expression%>)
<%
					} else if ("ruby".equals(language)) {
%>			
					new org.apache.camel.model.language.RubyExpression(<%=expression%>)
<%
					} else if ("spel".equals(language)) {
%>
					new org.apache.camel.model.language.SpELExpression(<%=expression%>)
<%
					} else if ("xpath".equals(language)) {
%>
					<%=cid%>ns.xpath(<%=expression%>)
<%
					} else if ("xquery".equals(language)) {
%>
					new org.apache.camel.model.language.XQueryExpression(<%=expression%>)
<%
					} else {
						String exp = getExpression(language, expression, cid, useNamespaces, ""); 
%>
					<%=exp%>
<%
					}
				} // END STICKY
				if("failover".equals(strategy)) { //BEGIN FAILOVER
					if("true".equals(exceptionMode)) {
						boolean isFirstException = true;
						if(exceptions.size()>0) {
							for(Map<String, String> anException : exceptions) {
								if(!isFirstException) {
%>
									,
<%
								}
								isFirstException=false;
%>
								<%=anException.get("EXCEPTION")%>.class
<%
							}
						}
					}
					if("true".equals(roundRobinMode)) {
						if("ALWAYS".equals(maxFailAttempt)) {
%>
							-1
<%
						}
						if("NEVER".equals(maxFailAttempt)) {
%>
							0
<%
						}
						if("SOMETIMES".equals(maxFailAttempt)) {
%>
							<%=Integer.parseInt(attemptNumber)%>
<%
						}
%>
						, <%="true".equals(inherit)?true:false%>, <%="true".equals(useRoundRobin)?true:false%>
<%
						
					}
				} //END FAILOVER
					
			
%>			
			)
<%
		} else {
%>
			.loadBalance(new <%=customBalancer%>())
<%
		} //END 2
	} //END 1
%>