<%@jet
    package="org.talend.designer.codegen.translators"
    imports="
        java.util.List
        java.util.ArrayList
        java.util.Collections
        java.util.Vector
        java.util.Map
        java.util.regex.Matcher
        java.util.regex.Pattern
        java.io.UnsupportedEncodingException
        java.net.URLEncoder
        org.talend.core.GlobalServiceRegister
        org.talend.core.model.process.IProcess
        org.talend.core.model.process.IProcess2
        org.talend.core.model.process.INode
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.EConnectionType
        org.talend.core.model.process.IContextParameter
        org.talend.core.model.process.IElementParameter
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.utils.NodeUtil
        org.talend.core.model.utils.JavaResourcesHelper
        org.talend.core.ui.branding.IBrandingService
        org.talend.core.ui.branding.AbstractBrandingService
        org.talend.designer.codegen.i18n.Messages
        org.talend.designer.codegen.ITalendSynchronizer
        org.talend.designer.codegen.config.CamelEndpointBuilder
        org.talend.designer.codegen.config.CamelEndpointBuilder.BuildingValueParamAppender
        org.talend.designer.codegen.config.CamelEndpointBuilder.ConditionParamAppender
        org.talend.designer.codegen.config.CamelEndpointBuilder.NodeParamNotDefaultAppender
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.designer.codegen.config.NodeParamsHelper
        org.talend.designer.runprocess.CodeGeneratorRoutine
        org.talend.core.model.process.EParameterFieldType
        org.talend.core.model.process.ProcessUtils
    "
    class="Header"
    skeleton="routelet.skeleton"
%>
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    Vector v = (Vector) codeGenArgument.getArgument();
    IProcess process = (IProcess) v.get(0);

    String version = (String) v.get(1);

    boolean isStudioEEVersion = org.talend.core.PluginChecker.isTIS();

    List<? extends INode> graphicalNodes = process.getGraphicalNodes();
    //boolean stats = codeGenArgument.isStatistics();
    //boolean trace = codeGenArgument.isTrace();
    //boolean isRunInMultiThread = codeGenArgument.getIsRunInMultiThread();
    //List<IContextParameter> params = new ArrayList<IContextParameter>();
    //params=process.getContextManager().getDefaultContext().getContextParameterList();
    boolean isTestContainer = ProcessUtils.isTestContainer(process);
    String className = isTestContainer ? process.getName() + "Test" : process.getName();
    String extendsClassName = isTestContainer ? "org.apache.camel.test.junit4.CamelTestSupport" : "org.apache.camel.builder.RouteBuilder";
%>
<%
IBrandingService service = (IBrandingService) GlobalServiceRegister.getDefault().getService(IBrandingService.class);
if (service instanceof AbstractBrandingService) {
%>
<%=((AbstractBrandingService) service).getJobLicenseHeader(version)%>
<%
}

    String routeFolderName = "";
    IProcess baseProcess = ProcessUtils.getTestContainerBaseProcess(process);
    if (baseProcess != null) {
        routeFolderName = JavaResourcesHelper.getJobFolderName(baseProcess.getName(), baseProcess.getVersion()) + ".";
    }
    routeFolderName = routeFolderName + JavaResourcesHelper.getJobFolderName(process.getName(), process.getVersion());
    String packageName = codeGenArgument.getCurrentProjectName().toLowerCase() + "." + routeFolderName;

%>
package <%= packageName %>;

<%
    java.util.Set<String> importsSet = new java.util.TreeSet<String>();
/*  for (String routine : CodeGeneratorRoutine.getRequiredRoutineName(process)) {
        if (!routine.equals(ITalendSynchronizer.TEMPLATE)) {
            importsSet.add("import routines."+routine);
        }
    }
*/

    for (String codesJar : CodeGeneratorRoutine.getRequiredCodesJarName(process)) {
        importsSet.add("import "+ codesJar);
    }

    importsSet.add("import java.util.HashMap");
    importsSet.add("import java.util.Map");
    importsSet.add("import routines.TalendString");
    importsSet.add("import routines.system.api.TalendESBRoute");
    importsSet.add("import routines.*");
    importsSet.add("import routines.system.*");
    importsSet.add("import org.apache.camel.CamelContext");
    importsSet.add("import java.util.Properties");

    String headerImports = ElementParameterParser.getValue(process, "__HEADER_IMPORT__");
    if(headerImports!=null && !"".equals(headerImports.trim())){
        String[] imports = headerImports.split(";");
        for(String s: imports){
            if(s!=null && !"".equals(s.trim())){
                importsSet.add(s.trim());
            }
        }
    }
    String footerImports = ElementParameterParser.getValue(process, "__FOOTER_IMPORT__");
    if(footerImports!=null && !"".equals(footerImports.trim())){
        String[] imports = footerImports.split(";");
        for(String s: imports){
            if(s!=null && !"".equals(s.trim())){
                importsSet.add(s.trim());
            }
        }
    }

    List<? extends INode> generatingNodes = process.getGeneratingNodes();
    for(INode n: generatingNodes){
        List<? extends IElementParameter> elementParameters = n.getElementParameters();
        for(IElementParameter p: elementParameters){
            if(p.getShowIf() != null && !p.isShow(elementParameters)){
                continue;
            }
            if(EParameterFieldType.MEMO_IMPORT == p.getFieldType()){
                Object value = p.getValue();
                if(value == null || !(value instanceof String) || "".equals(((String)value).trim())){
                    continue;
                }
                String[] imports = ((String)value).trim().split(";");
                for(String s: imports){
                    if(s!=null && !"".equals(s.trim())){
                        importsSet.add(s.trim());
                    }
                }
            }
        }

    }

    if(isTestContainer){
        importsSet.add("import org.apache.camel.builder.RouteBuilder");
        importsSet.add("import org.junit.Test");
        importsSet.add("import org.apache.camel.component.mock.MockEndpoint");
    }

    for(String s: importsSet){
%>
        <%=s%> ;
<%
    }
%>

 <%
        boolean hasCSoap = false;
        boolean hasCRest = false;

        for (INode node : graphicalNodes) {
            if ("cSOAP".equals(node.getComponent().getName())) {
                hasCSoap = true;
            }
            if ("cREST".equals(node.getComponent().getName())) {
                hasCRest = true;
            }
        }

 %>
 
<%
    if(hasCSoap){
%>

            def getCxfEndpoint(String uri){
                org.apache.camel.component.cxf.CxfEndpoint cxfEndpoint = (org.apache.camel.component.cxf.CxfEndpoint) endpoint(uri);

                return cxfEndpoint;
            }
			
<%  } %>

<%
    List< ? extends INode> processNodes = (List< ? extends INode>)process.getGraphicalNodes();
    for (INode node : processNodes) {
            if (!node.isActivate()) {
                continue;
            }
            String nodeComponentName = node.getComponent().getName();
    if("cSOAP".equals(nodeComponentName)){
            IElementParameter param = node.getElementParameter("LABEL");
            String cid = node.getUniqueName();
            NodeParamsHelper helper = new NodeParamsHelper(node);
            String uri = "";

            String endpointVar = "endpoint_" + node.getUniqueName();
%>
<%@ include file="platform:/plugin/org.talend.designer.camel.components.localprovider/components/cSOAP/cSOAP_uri.javajet"%>

        org.apache.camel.component.cxf.CxfEndpoint <%=endpointVar%> = getCxfEndpoint(<%=uri%>);

<%  }  %>
<%  }  %>

