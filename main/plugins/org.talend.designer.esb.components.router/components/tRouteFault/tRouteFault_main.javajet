<%@ jet
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory    
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType

		java.util.List
		java.util.Map
"
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode) codeGenArgument.getArgument();
String cid = node.getUniqueName();

List<Map<String, String>> tableValues =
    (List<Map<String,String>>)ElementParameterParser.getObjectValue(
        node,
        "__VALUES__"
    );

List< ? extends IConnection> conns = node.getIncomingConnections();
String firstConnName = "";	

for(IConnection conn : conns) {
    if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
 		firstConnName = conn.getName();
 		break;
    }
}

List<IMetadataTable> metadatas = node.getMetadataList();
IMetadataTable metadata = null;
if ((metadatas!=null)&&(metadatas.size()>0)) {
	metadata = metadatas.get(0);    
}
%>


// tRouterFault code

    <%
    for(IConnection conn : conns) { // 1
        if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {  // 2
        	boolean hasJudgedHeaders = false;
        	StringBuilder bodySb = new StringBuilder();
%>        	
	        // copy Body from IN to OUT to propagate them
   			routerExchange.getOut().setBody(routerExchange.getIn().getBody());
	        // copy headers from IN to OUT to propagate them
			routerExchange.getOut().setHeaders(routerExchange.getIn().getHeaders());
			// copy attachements from IN to OUT to propagate them
			routerExchange.getOut().setAttachments(routerExchange.getIn().getAttachments());
	        

<%                   	
            for(Map<String, String> tableValue : tableValues) { // 3
            	String label = tableValue.get("SCHEMA_COLUMN");
	            String value = tableValue.get("VALUE");
	            String type = tableValue.get("TYPE");

	            IMetadataColumn column = metadata.getColumn(label);
	            String talendType = column.getTalendType();
	            JavaType javaType = JavaTypesManager.getJavaTypeFromId(talendType);
	            String typeToGenerate = JavaTypesManager.getTypeToGenerate(javaType, true);%>
	            
	            <%if("Body".equals(type)){ 
                    // http://camel.apache.org/using-getin-or-getout-methods-on-exchange.html
	            	if("id_Document".equals(talendType)){
	            		%>
		                routerExchange.getOut().setBody(<%=conn.getName()%>.<%=label%>.getDocument().asXML(), org.w3c.dom.Document.class);
		            	<%
	            	}else{
	            		%>
		                routerExchange.getOut().setBody(<%=conn.getName()%>.<%=label%>, <%=typeToGenerate%>.class);
		            	<%
	            	}
	            }else if("Header".equals(type)){
	            	%>
	            	routerExchange.getOut().setHeader(<%=value%>, <%=conn.getName()%>.<%=label%>);
	            	<%
	            }else if("Property".equals(type)){
	            	%>
	            	routerExchange.setProperty(<%=value%>, <%=conn.getName()%>.<%=label%>);
	            	<%
	            }else if("System".equals(type)){
	            	%>
	            	System.setProperty(<%=value%>, <%=conn.getName()%>.<%=label%> == null? null:<%=conn.getName()%>.<%=label%>.toString());
	            	<%
	            }
        } // 3
%>
			//set output as fault    
	        routerExchange.getOut().setFault(true);
<%
    } // 2
} // 1

%>